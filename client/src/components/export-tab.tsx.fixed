import { useState } from "react";
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import StandardChart from "@/components/charts/StandardChart";
import { useQuery } from "@tanstack/react-query";
import GenerateReport from './GenerateReport';
import { DownloadIcon, FileIcon } from "lucide-react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { useFilters } from "@/contexts/filter-context";

export default function ExportTab() {
  // Use the global filter context instead of local state
  const { filters, filteredLeads } = useFilters();
  
  const [showTable, setShowTable] = useState(true);
  const [includeLeadDataInReport, setIncludeLeadDataInReport] = useState(false);
  const [exportFormat, setExportFormat] = useState("pdf");
  
  // Chart type states for each section
  const [projectChartType, setProjectChartType] = useState<"bar" | "pie" | "line" | "3d-pie">("bar");
  const [statusChartType, setStatusChartType] = useState<"bar" | "pie" | "line" | "3d-pie">("pie");
  const [personnelChartType, setPersonnelChartType] = useState<"bar" | "pie" | "line" | "3d-pie">("bar");
  const [leadTypeChartType, setLeadTypeChartType] = useState<"bar" | "pie" | "line" | "3d-pie">("pie");

  // Use the filtered leads from the global filter context
  const leads = filteredLeads;
  
  // Fetch expense data based on selected project from filters
  const { data: expenses = [] } = useQuery({
    queryKey: ["/api/lead-expenses", filters.selectedProject !== "all" ? filters.selectedProject : undefined],
    queryFn: async () => {
      const params = new URLSearchParams();
      if (filters.selectedProject && filters.selectedProject !== "all") {
        params.append("projectName", filters.selectedProject);
      }
      const response = await fetch(`/api/lead-expenses?${params.toString()}`);
      return response.json();
    },
  });

  const { data: salesReps = [] } = useQuery({
    queryKey: ["/api/sales-reps"],
    queryFn: async () => {
      const response = await fetch("/api/sales-reps");
      return response.json();
    },
  });

  // Extract unique projects and statuses from leads
  const uniqueProjects = Array.from(new Set<string>(leads.map((lead: any) => lead.projectName).filter(Boolean)));
  const uniqueStatuses = Array.from(new Set<string>(leads.map((lead: any) => lead.status).filter(Boolean)));

  // Prepare chart data (status distribution)
  const statusCounts = leads.reduce((acc: any, lead: any) => {
    const s = lead.status || "TanÄ±msÄ±z";
    acc[s] = (acc[s] || 0) + 1;
    return acc;
  }, {});
  const statusChartData = Object.entries(statusCounts).map(([name, value]: any) => ({
    name,
    value,
    percentage: leads.length > 0 ? Math.round((value / leads.length) * 100) : 0,
  }));

  // Prepare chart data (project distribution)
  const projectCounts = leads.reduce((acc: any, lead: any) => {
    const p = lead.projectName || "TanÄ±msÄ±z";
    acc[p] = (acc[p] || 0) + 1;
    return acc;
  }, {});
  const projectChartData = Object.entries(projectCounts).map(([name, value]: any) => ({
    name,
    value,
    percentage: leads.length > 0 ? Math.round((value / leads.length) * 100) : 0,
  }));

  // Prepare chart data (salesperson distribution)
  const salesRepCounts = leads.reduce((acc: any, lead: any) => {
    const rep = lead.assignedPersonnel || "TanÄ±msÄ±z";
    acc[rep] = (acc[rep] || 0) + 1;
    return acc;
  }, {});
  const salesRepChartData = Object.entries(salesRepCounts).map(([name, value]: any) => ({
    name,
    value,
    percentage: leads.length > 0 ? Math.round((value / leads.length) * 100) : 0,
  }));

  // Prepare lead type distribution data
  const leadTypeCounts = leads.reduce((acc: any, lead: any) => {
    const type = lead.leadType || "TanÄ±msÄ±z";
    acc[type] = (acc[type] || 0) + 1;
    return acc;
  }, {});
  const leadTypeChartData = Object.entries(leadTypeCounts).map(([name, value]: any) => ({
    name,
    value,
    percentage: leads.length > 0 ? Math.round((value / leads.length) * 100) : 0,
  }));

  // Calculate expense statistics based on current filters
  // Filter expenses based on selected project or get all if "all" is selected
  const filteredExpenses = filters.selectedProject === 'all' 
    ? expenses 
    : expenses.filter((expense: any) => expense.projectName === filters.selectedProject);
  
  // Calculate total expenses from filtered expenses
  const totalExpenses = filteredExpenses.reduce((sum: number, expense: any) => sum + Number(expense.amountTL || 0), 0);
  
  // Calculate sales based on filtered leads
  const sales = leads.filter((lead: any) => lead.wasSaleMade === "evet").length;
  
  // Calculate cost metrics
  const costPerLead = leads.length > 0 ? totalExpenses / leads.length : 0;
  const costPerSale = sales > 0 ? totalExpenses / sales : 0;
  const conversionRate = leads.length > 0 ? (sales / leads.length * 100) : 0;

  // Prepare cost metrics data
  const costMetricsData = [
    { name: "Toplam Gider (TL)", value: totalExpenses.toFixed(2) },
    { name: "Lead BaÅŸÄ±na Maliyet (TL)", value: costPerLead.toFixed(2) },
    { name: "SatÄ±ÅŸ BaÅŸÄ±na Maliyet (TL)", value: costPerSale.toFixed(2) },
    { name: "Toplam Lead SayÄ±sÄ±", value: leads.length },
    { name: "Toplam SatÄ±ÅŸ SayÄ±sÄ±", value: sales },
    { name: "DÃ¶nÃ¼ÅŸÃ¼m OranÄ±", value: `%${conversionRate.toFixed(2)}` },
  ];

  // Prepare data for GenerateReport
  const reportData = {
    status: statusChartData.map(item => ({
      name: item.name,
      count: item.value,
      percent: item.percentage + '%',
    })),
    projects: projectChartData.map(item => ({
      name: item.name,
      count: item.value,
      percent: item.percentage + '%',
    })),
    personnel: salesRepChartData.map(item => ({
      name: item.name,
      count: item.value,
      percent: item.percentage + '%',
    })),
    leadTypes: leadTypeChartData.map(item => ({
      name: item.name,
      count: item.value,
      percent: item.percentage + '%',
    })),
    // Ensure cost metrics are properly formatted for the report
    costMetrics: [
      { name: "Toplam Gider (TL)", value: totalExpenses.toFixed(2) },
      { name: "Lead BaÅŸÄ±na Maliyet (TL)", value: costPerLead.toFixed(2) },
      { name: "SatÄ±ÅŸ BaÅŸÄ±na Maliyet (TL)", value: costPerSale.toFixed(2) },
      { name: "Toplam Lead SayÄ±sÄ±", value: leads.length.toString() },
      { name: "Toplam SatÄ±ÅŸ SayÄ±sÄ±", value: sales.toString() },
      { name: "DÃ¶nÃ¼ÅŸÃ¼m OranÄ±", value: `%${leads.length > 0 ? (sales / leads.length * 100).toFixed(2) : 0}` },
    ],
    includeLeadData: includeLeadDataInReport,
    leadData: includeLeadDataInReport ? leads : []
  };

  // UI
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Proje BazlÄ± Rapor DÄ±ÅŸa AktarÄ±mÄ±</CardTitle>
          <CardDescription>Lead sayÄ±larÄ±, durum daÄŸÄ±lÄ±mÄ±, personel analizi ve maliyet metrikleri</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            {/* Export Format Selector */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <Label>Format</Label>
                <Select value={exportFormat} onValueChange={setExportFormat}>
                  <SelectTrigger>
                    <SelectValue placeholder="PDF" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="pdf">PDF</SelectItem>
                    <SelectItem value="excel">Excel</SelectItem>
                    <SelectItem value="word">Word</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="col-span-2">
                <p className="text-sm text-muted-foreground mt-2">
                  KullanÄ±lan filtreler: 
                  {filters.selectedProject !== 'all' && <Badge variant="outline" className="ml-1">{filters.selectedProject}</Badge>}
                  {filters.selectedSalesperson !== 'all' && <Badge variant="outline" className="ml-1">{filters.selectedSalesperson}</Badge>}
                  {filters.selectedLeadType !== 'all' && <Badge variant="outline" className="ml-1">{filters.selectedLeadType}</Badge>}
                  {filters.dateFilterType === 'custom' && filters.startDate && filters.endDate && 
                    <Badge variant="outline" className="ml-1">{`${filters.startDate} - ${filters.endDate}`}</Badge>}
                </p>
              </div>
            </div>
            
            {/* Chart Type Selectors */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div>
                <Label className="text-xs">Proje Grafik Tipi</Label>
                <Select value={projectChartType} onValueChange={setProjectChartType as any}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="bar">Ã‡ubuk</SelectItem>
                    <SelectItem value="pie">Pasta</SelectItem>
                    <SelectItem value="line">Ã‡izgi</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label className="text-xs">Durum Grafik Tipi</Label>
                <Select value={statusChartType} onValueChange={setStatusChartType as any}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="bar">Ã‡ubuk</SelectItem>
                    <SelectItem value="pie">Pasta</SelectItem>
                    <SelectItem value="line">Ã‡izgi</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label className="text-xs">Personel Grafik Tipi</Label>
                <Select value={personnelChartType} onValueChange={setPersonnelChartType as any}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="bar">Ã‡ubuk</SelectItem>
                    <SelectItem value="pie">Pasta</SelectItem>
                    <SelectItem value="line">Ã‡izgi</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label className="text-xs">Lead Tip Grafik Tipi</Label>
                <Select value={leadTypeChartType} onValueChange={setLeadTypeChartType as any}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="bar">Ã‡ubuk</SelectItem>
                    <SelectItem value="pie">Pasta</SelectItem>
                    <SelectItem value="line">Ã‡izgi</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            {/* Summary Card */}
            <Card className="bg-blue-50 border-blue-200 dark:bg-blue-950 dark:border-blue-800">
              <CardHeader className="pb-0">
                <CardTitle>Ã–zet Metrikler</CardTitle>
                <CardDescription>
                  {filters.selectedProject !== 'all' ? `${filters.selectedProject} projesi iÃ§in metrikler` : 'TÃ¼m projeler iÃ§in metrikler'}
                  {filters.selectedSalesperson !== 'all' ? `, ${filters.selectedSalesperson} personeli` : ''}
                  {filters.selectedLeadType !== 'all' ? `, ${filters.selectedLeadType} tipi` : ''}
                </CardDescription>
              </CardHeader>
              <CardContent className="pt-4">
                <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                  <div className="flex flex-col p-2 bg-white dark:bg-blue-900 rounded shadow-sm">
                    <span className="text-sm text-muted-foreground">Toplam Lead</span>
                    <span className="text-2xl font-bold">{leads.length}</span>
                  </div>
                  <div className="flex flex-col p-2 bg-white dark:bg-blue-900 rounded shadow-sm">
                    <span className="text-sm text-muted-foreground">Toplam SatÄ±ÅŸ</span>
                    <span className="text-2xl font-bold">{sales}</span>
                  </div>
                  <div className="flex flex-col p-2 bg-white dark:bg-blue-900 rounded shadow-sm">
                    <span className="text-sm text-muted-foreground">Toplam Maliyet</span>
                    <span className="text-2xl font-bold">{totalExpenses.toFixed(2)} TL</span>
                  </div>
                  <div className="flex flex-col p-2 bg-white dark:bg-blue-900 rounded shadow-sm">
                    <span className="text-sm text-muted-foreground">Lead BaÅŸÄ± Maliyet</span>
                    <span className="text-2xl font-bold">{costPerLead.toFixed(2)} TL</span>
                  </div>
                  <div className="flex flex-col p-2 bg-white dark:bg-blue-900 rounded shadow-sm">
                    <span className="text-sm text-muted-foreground">SatÄ±ÅŸ BaÅŸÄ± Maliyet</span>
                    <span className="text-2xl font-bold">{costPerSale.toFixed(2)} TL</span>
                  </div>
                  <div className="flex flex-col p-2 bg-white dark:bg-blue-900 rounded shadow-sm">
                    <span className="text-sm text-muted-foreground">DÃ¶nÃ¼ÅŸÃ¼m OranÄ±</span>
                    <span className="text-2xl font-bold">%{leads.length > 0 ? (sales / leads.length * 100).toFixed(2) : 0}</span>
                  </div></div>
              </CardContent>
            </Card>
            
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <Button variant="outline" onClick={() => setShowTable((v) => !v)}>
                  {showTable ? "Tabloyu Gizle" : "Tabloyu GÃ¶ster"}
                </Button>
                <div className="flex items-center space-x-2 border rounded-md p-2">
                  <Label htmlFor="includeLeadData" className="text-sm cursor-pointer">
                    Lead Verilerini Rapora Ekle
                  </Label>
                  <Input
                    id="includeLeadData"
                    type="checkbox"
                    className="w-4 h-4 cursor-pointer"
                    checked={includeLeadDataInReport}
                    onChange={(e) => setIncludeLeadDataInReport(e.target.checked)}
                  />
                </div>
                {filters.selectedProject !== 'all' && <Badge variant="outline" className="px-2">{filters.selectedProject}</Badge>}
              </div>
              
              <div className="flex space-x-2">
                <GenerateReport
                  data={{
                    ...reportData,
                    chartTypes: {
                      projects: projectChartType,
                      status: statusChartType,
                      personnel: personnelChartType,
                      leadTypes: leadTypeChartType
                    }
                  }}
                  projectName={filters.selectedProject === 'all' ? 'TÃ¼mÃ¼' : filters.selectedProject}
                  salesRep={filters.selectedSalesperson === 'all' ? 'TÃ¼mÃ¼' : filters.selectedSalesperson}
                  leadType={filters.selectedLeadType === 'all' ? 'TÃ¼mÃ¼' : filters.selectedLeadType}
                  dateRange={
                    filters.dateFilterType === 'custom' && filters.startDate && filters.endDate
                      ? `${filters.startDate} - ${filters.endDate}`
                      : filters.dateFilterType === 'month' && filters.selectedMonth && filters.selectedYear
                        ? `${filters.selectedMonth}/${filters.selectedYear}`
                        : filters.dateFilterType === 'year' && filters.selectedYear
                          ? `${filters.selectedYear}`
                          : '- - -'
                  }
                  format={exportFormat as "pdf" | "excel" | "word"}
                  includeLeadData={includeLeadDataInReport}
                />
              </div>
            </div>
            
            <div className="flex items-center mt-3 p-2 bg-blue-50 rounded-md">
              <span className="text-xs text-blue-700">
                <strong>Ä°pucu:</strong> YukarÄ±daki grafik tipi seÃ§imleri hem gÃ¶sterilen grafikleri hem de dÄ±ÅŸa aktarÄ±lmÄ±ÅŸ raporlarÄ± etkiler.
                Grafik tiplerini deÄŸiÅŸtirerek ve dÄ±ÅŸa aktararak Ã¶zelleÅŸtirilmiÅŸ raporlar oluÅŸturabilirsiniz.
              </span>
            </div>
          </div>

          {/* Table of leads */}
          {showTable && (
            <div className="overflow-x-auto mb-8" id="leads-table-pdf">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>MÃ¼ÅŸteri</TableHead>
                    <TableHead>Proje</TableHead>
                    <TableHead>Personel</TableHead>
                    <TableHead>Lead Tipi</TableHead>
                    <TableHead>Durum</TableHead>
                    <TableHead>Tarih</TableHead>
                    <TableHead>SatÄ±ÅŸ Durumu</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {leads.map((lead: any, i: number) => (
                    <TableRow key={i}>
                      <TableCell>{lead.customerName}</TableCell>
                      <TableCell>{lead.projectName}</TableCell>
                      <TableCell>{lead.assignedPersonnel}</TableCell>
                      <TableCell>{lead.leadType}</TableCell>
                      <TableCell>{lead.status}</TableCell>
                      <TableCell>{lead.requestDate}</TableCell>
                      <TableCell>{lead.wasSaleMade === "evet" ? "âœ“" : "âœ—"}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}

          {/* All Reports in One Unified View */}
          <div className="mt-8 space-y-8" id="unified-report-sections">
            {/* Genel BakÄ±ÅŸ - Projects */}
            <Card id="overview-section">
              <CardHeader className="bg-muted/20">
                <CardTitle>Genel BakÄ±ÅŸ</CardTitle>
                <CardDescription>Projelere gÃ¶re lead daÄŸÄ±lÄ±mÄ±</CardDescription>
              </CardHeader>
              <CardContent className="pt-6">
                <div id="project-section-pdf">
                  <StandardChart
                    title="Proje BazlÄ± Lead DaÄŸÄ±lÄ±mÄ±"
                    data={projectChartData}
                    chartType={projectChartType}
                    gradientColors={["from-blue-50", "to-indigo-100"]}
                    borderColor="border-blue-100 dark:border-blue-800"
                    icon="ğŸ¢"
                    showDataTable={true}
                    tableTitle="Proje DetaylarÄ±"
                    canvasId="project-chart-canvas"
                  />
                </div>
                </div>
              </CardContent>
            </Card>
            
            {/* Status Distribution */}
            <Card id="status-section">
              <CardHeader className="bg-muted/20">
                <CardTitle>Durum Analizi</CardTitle>
                <CardDescription>Lead durumlarÄ±nÄ±n daÄŸÄ±lÄ±mÄ±</CardDescription>
              </CardHeader>
              <CardContent className="pt-6">
                <div id="status-section-pdf">
                  <StandardChart
                    title="Durum DaÄŸÄ±lÄ±mÄ±"
                    data={statusChartData}
                    chartType={statusChartType}
                    gradientColors={["from-yellow-50", "to-orange-100"]}
                    borderColor="border-yellow-100 dark:border-yellow-800"
                    icon="ğŸ“Š"
                    showDataTable={true}
                    tableTitle="Durum DetaylarÄ±"
                    canvasId="status-chart-canvas"
                  />
                </div>
                </div>
              </CardContent>
            </Card>
            
            {/* Personnel Analysis */}
            <Card id="personnel-section">
              <CardHeader className="bg-muted/20">
                <CardTitle>Personel Analizi</CardTitle>
                <CardDescription>Personel bazÄ±nda lead ve satÄ±ÅŸ daÄŸÄ±lÄ±mÄ±</CardDescription>
              </CardHeader>
              <CardContent className="pt-6">
                <div id="salesrep-section-pdf">
                  <StandardChart
                    title="Personel DaÄŸÄ±lÄ±mÄ±"
                    data={salesRepChartData}
                    chartType={personnelChartType}
                    gradientColors={["from-green-50", "to-emerald-100"]}
                    borderColor="border-green-100 dark:border-green-800"
                    icon="ğŸ‘¥"
                    showDataTable={true}
                    tableTitle="Personel DetaylarÄ±"
                    canvasId="salesrep-chart-canvas"
                  />
                </div>
                </div>
              </CardContent>
            </Card>
            
            {/* Lead Type Analysis */}
            <Card id="lead-types-section">
              <CardHeader className="bg-muted/20">
                <CardTitle>Lead Tip Analizi</CardTitle>
                <CardDescription>Lead tiplerinin daÄŸÄ±lÄ±mÄ± (Kiralama, SatÄ±ÅŸ, DiÄŸer)</CardDescription>
              </CardHeader>
              <CardContent className="pt-6">
                <div id="leadtype-section-pdf">
                  <StandardChart
                    title="Lead Tip DaÄŸÄ±lÄ±mÄ±"
                    data={leadTypeChartData}
                    chartType={leadTypeChartType}
                    gradientColors={["from-purple-50", "to-violet-100"]}
                    borderColor="border-purple-100 dark:border-purple-800"
                    icon="ğŸ”"
                    showDataTable={true}
                    tableTitle="Lead Tip DetaylarÄ±"
                    canvasId="leadtype-chart-canvas"
                  />
                </div>
                </div>
              </CardContent>
            </Card>
            
            {/* Cost Analysis */}
            <Card id="costs-section">
              <CardHeader className="bg-muted/20">
                <CardTitle>Maliyet Analizi</CardTitle>
                <CardDescription>Toplam maliyet, lead baÅŸÄ±na ve satÄ±ÅŸ baÅŸÄ±na maliyet</CardDescription>
              </CardHeader>
              <CardContent className="pt-6">
                <div className="space-y-6">
                  <div className="overflow-x-auto">
                    <Table id="cost-metrics-table">
                      <TableHeader>
                        <TableRow>
                          <TableHead>Maliyet MetriÄŸi</TableHead>
                          <TableHead>DeÄŸer</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {costMetricsData.map((item, i) => (
                          <TableRow key={i}>
                            <TableCell className="font-medium">{item.name}</TableCell>
                            <TableCell>{item.value}</TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                  
                  {/* Expense breakdown if there are expenses */}
                  {filteredExpenses.length > 0 && (
                    <div className="mt-6">
                      <h3 className="text-lg font-semibold mb-2">Gider DetaylarÄ±</h3>
                      <Table>
                        <TableHeader>
                          <TableRow>
                            <TableHead>Ay</TableHead>
                            <TableHead>Gider TÃ¼rÃ¼</TableHead>
                            <TableHead>Proje</TableHead>
                            <TableHead>Miktar (TL)</TableHead>
                            <TableHead>AÃ§Ä±klama</TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {filteredExpenses.map((expense: any, i: number) => (
                            <TableRow key={i}>
                              <TableCell>{expense.month}</TableCell>
                              <TableCell>{expense.expenseType === 'agency_fee' ? 'Ajans Ãœcreti' : 'Reklam Gideri'}</TableCell>
                              <TableCell>{expense.projectName || 'Genel'}</TableCell>
                              <TableCell>{parseFloat(expense.amountTL).toFixed(2)} TL</TableCell>
                              <TableCell>{expense.description}</TableCell>
                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    </div>
                  )}
                </div>
                </div>
              </CardContent>
            </Card>
          </div>
                </div>
        </CardContent>
      </Card>
    </div>
  );
}



