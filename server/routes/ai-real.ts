import { Request, Response } from "express";
import { storage } from "../storage.js";

interface AIQueryRequest {
  query: string;
}

interface StreamEvent {
  type: "text" | "chart" | "error" | "complete";
  chunk?: string;
  chartSpec?: any;
  error?: string;
}

// Real AI Implementation using local LLM
class RealAIAssistant {
  private isInitialized = false;
  private model: any = null;

  constructor() {
    this.initializeAI();
  }

  private async initializeAI() {
    try {
      // Try to use a local LLM - first attempt with Transformers.js
      const { pipeline } = await import("@xenova/transformers");

      console.log("ü§ñ Loading AI model...");
      this.model = await pipeline("text-generation", "Xenova/distilgpt2");
      this.isInitialized = true;
      console.log("‚úÖ AI model loaded successfully");
    } catch (error) {
      console.log("üì¶ Transformers.js not available, trying alternative...");

      try {
        // Fallback to a simple but effective local approach
        this.model = new SimpleAI();
        this.isInitialized = true;
        console.log("‚úÖ Simple AI initialized");
      } catch (fallbackError) {
        console.error("‚ùå AI initialization failed:", fallbackError);
        this.isInitialized = false;
      }
    }
  }

  async processQuery(
    query: string,
    leadData: any[]
  ): Promise<{
    summary: string;
    chartSpec?: any;
    data: any[];
  }> {
    if (!this.isInitialized) {
      throw new Error("AI not initialized");
    }

    // Create comprehensive context about the data
    const context = this.buildDataContext(leadData);

    // Build the prompt for the AI
    const prompt = this.buildPrompt(query, context, leadData);

    try {
      // Generate response using the AI model
      let response;
      if (this.model.generate) {
        response = await this.model.generate(prompt);
      } else {
        response = await this.model(prompt, { max_new_tokens: 500 });
      }

      // Process the AI response
      return this.processAIResponse(response, query, leadData);
    } catch (error) {
      console.error("AI processing error:", error);
      // Fallback to intelligent data analysis
      return this.fallbackAnalysis(query, leadData);
    }
  }

  private buildDataContext(leadData: any[]): string {
    const stats = {
      total: leadData.length,
      sales: leadData.filter((l) => l.leadType === "satis").length,
      rental: leadData.filter((l) => l.leadType === "kiralama").length,
      sources: Array.from(
        new Set(leadData.map((l) => l.firstCustomerSource).filter(Boolean))
      ),
      personnel: Array.from(
        new Set(leadData.map((l) => l.assignedPersonnel).filter(Boolean))
      ),
      statuses: Array.from(
        new Set(leadData.map((l) => l.status).filter(Boolean))
      ),
      recentLeads: leadData.slice(0, 5).map((l) => ({
        name: l.customerName,
        source: l.firstCustomerSource,
        type: l.leadType,
        status: l.status,
        date: l.requestDate,
      })),
    };

    return `
DATA CONTEXT:
- Total leads: ${stats.total}
- Sales leads: ${stats.sales}
- Rental leads: ${stats.rental}
- Sources: ${stats.sources.join(", ")}
- Personnel: ${stats.personnel.join(", ")}
- Statuses: ${stats.statuses.join(", ")}
- Recent leads: ${JSON.stringify(stats.recentLeads, null, 2)}

SCHEMA:
- id: unique identifier
- customerName: customer name
- firstCustomerSource: lead source (Instagram, Facebook, Referans, etc.)
- leadType: 'satis' (sales) or 'kiralama' (rental)
- status: lead status (yeni, arama_yapildi, randevu_alindi, satis_yapildi, etc.)
- assignedPersonnel: assigned sales person
- requestDate: date when lead was received
- webFormNote: additional notes from web form
- projectName: extracted project name
- lastContactNote: last contact note
- lastContactResult: result of last contact
`;
  }

  private buildPrompt(query: string, context: string, leadData: any[]): string {
    return `
You are an AI assistant for a Turkish real estate lead management system. You have access to comprehensive lead data and can answer any question about it.

${context}

INSTRUCTIONS:
1. Answer in Turkish
2. Be specific and use actual data
3. If asked about anything outside the data, explain what data you have access to
4. For numerical questions, provide exact numbers
5. For trends, analyze the actual dates and patterns
6. For comparisons, use the actual data to compare
7. If asked about space or unrelated topics, redirect to what you can help with regarding the lead data

USER QUESTION: ${query}

Please provide a detailed answer in Turkish based on the actual data. If you need to create a chart, suggest the appropriate type (pie, bar, line) and provide the data structure.

RESPONSE FORMAT:
{
  "summary": "Your detailed Turkish answer here",
  "chartSpec": {
    "type": "pie/bar/line",
    "title": "Chart title in Turkish",
    "labels": ["label1", "label2"],
    "data": [value1, value2],
    "colors": ["#9b51e0", "#3498db"]
  },
  "needsChart": true/false
}
`;
  }

  private async processAIResponse(
    response: any,
    query: string,
    leadData: any[]
  ): Promise<any> {
    let responseText =
      typeof response === "string"
        ? response
        : response.generated_text || response.text || "";

    // Try to extract JSON from the response
    try {
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        return {
          summary: parsed.summary || responseText,
          chartSpec: parsed.chartSpec || null,
          data: this.getRelevantData(query, leadData),
        };
      }
    } catch (parseError) {
      console.log("Could not parse AI response as JSON, using text response");
    }

    // If no JSON, use the text response and try to determine if a chart is needed
    return {
      summary: responseText,
      chartSpec: this.generateChartFromQuery(query, leadData),
      data: this.getRelevantData(query, leadData),
    };
  }

  private fallbackAnalysis(query: string, leadData: any[]): any {
    const lowerQuery = query.toLowerCase();

    // Intelligent analysis based on query content
    if (lowerQuery.includes("uzay") || lowerQuery.includes("space")) {
      return {
        summary:
          "Uzay hakkƒ±nda bilgi veremem, ancak gayrimenkul lead verileriniz hakkƒ±nda her t√ºrl√º soruyu yanƒ±tlayabilirim. Lead sayƒ±larƒ±, kaynak analizi, personel performansƒ±, trend analizi gibi konularda yardƒ±mcƒ± olabilirim. Hangi konuda bilgi almak istiyorsunuz?",
        data: [],
      };
    }

    // Data analysis
    const total = leadData.length;
    const sales = leadData.filter((l) => l.leadType === "satis").length;
    const rental = leadData.filter((l) => l.leadType === "kiralama").length;

    if (
      lowerQuery.includes("ka√ß") ||
      lowerQuery.includes("sayƒ±") ||
      lowerQuery.includes("adet")
    ) {
      return {
        summary: `Lead verilerinizde toplam ${total} adet lead bulunmaktadƒ±r. Bunlarƒ±n ${sales} tanesi satƒ±lƒ±k, ${rental} tanesi kiralƒ±k propertyler i√ßindir. Daha detaylƒ± analiz i√ßin specific sorular sorabilirsiniz.`,
        chartSpec: {
          type: "pie",
          title: "Lead Tipi Daƒüƒ±lƒ±mƒ±",
          labels: ["Satƒ±lƒ±k", "Kiralƒ±k"],
          data: [sales, rental],
          colors: ["#9b51e0", "#3498db"],
        },
        data: [{ total, sales, rental }],
      };
    }

    // Default comprehensive analysis
    const sources = leadData.reduce((acc, lead) => {
      const source = lead.firstCustomerSource || "Bilinmiyor";
      acc[source] = (acc[source] || 0) + 1;
      return acc;
    }, {});

    const topSource = Object.entries(sources).sort(
      (a, b) => (b[1] as number) - (a[1] as number)
    )[0];

    return {
      summary: `"${query}" sorunuz i√ßin ≈üu analizi yapabiliyorum:
      
üìä Genel Durum:
‚Ä¢ Toplam ${total} lead
‚Ä¢ ${sales} satƒ±lƒ±k, ${rental} kiralƒ±k
‚Ä¢ En aktif kaynak: ${topSource[0]} (${topSource[1]} lead)

üí° Daha spesifik sorular sorun:
‚Ä¢ "Instagram'dan ka√ß lead geldi?"
‚Ä¢ "Ahmet'in performansƒ± nasƒ±l?"
‚Ä¢ "Bu ay trend analizi"
‚Ä¢ "Hangi durumda ka√ß lead var?"

Ben gayrimenkul lead verilerinizin uzmanƒ±yƒ±m ve her t√ºrl√º soruyu yanƒ±tlayabilirim!`,
      chartSpec: {
        type: "pie",
        title: "Lead Kaynaklarƒ±",
        labels: Object.keys(sources),
        data: Object.values(sources),
        colors: ["#9b51e0", "#3498db", "#2ecc71", "#f39c12", "#e74c3c"],
      },
      data: Object.entries(sources).map(([name, count]) => ({ name, count })),
    };
  }

  private getRelevantData(query: string, leadData: any[]): any[] {
    // Return data relevant to the query
    const lowerQuery = query.toLowerCase();

    if (lowerQuery.includes("instagram")) {
      return leadData.filter((l) =>
        l.firstCustomerSource?.toLowerCase().includes("instagram")
      );
    }

    if (lowerQuery.includes("facebook")) {
      return leadData.filter((l) =>
        l.firstCustomerSource?.toLowerCase().includes("facebook")
      );
    }

    if (lowerQuery.includes("satƒ±lƒ±k") || lowerQuery.includes("satis")) {
      return leadData.filter((l) => l.leadType === "satis");
    }

    if (lowerQuery.includes("kiralƒ±k") || lowerQuery.includes("kiralama")) {
      return leadData.filter((l) => l.leadType === "kiralama");
    }

    return leadData.slice(0, 10); // Return first 10 for general queries
  }

  private generateChartFromQuery(query: string, leadData: any[]): any {
    const lowerQuery = query.toLowerCase();

    if (lowerQuery.includes("daƒüƒ±lƒ±m") || lowerQuery.includes("kaynak")) {
      const sources = leadData.reduce((acc, lead) => {
        const source = lead.firstCustomerSource || "Bilinmiyor";
        acc[source] = (acc[source] || 0) + 1;
        return acc;
      }, {});

      return {
        type: "pie",
        title: "Lead Kaynaklarƒ± Daƒüƒ±lƒ±mƒ±",
        labels: Object.keys(sources),
        data: Object.values(sources),
        colors: ["#9b51e0", "#3498db", "#2ecc71", "#f39c12", "#e74c3c"],
      };
    }

    if (lowerQuery.includes("performans") || lowerQuery.includes("personel")) {
      const personnel = leadData.reduce((acc, lead) => {
        const person = lead.assignedPersonnel || "Atanmamƒ±≈ü";
        acc[person] = (acc[person] || 0) + 1;
        return acc;
      }, {});

      return {
        type: "bar",
        title: "Personel Performansƒ±",
        labels: Object.keys(personnel),
        data: Object.values(personnel),
        colors: ["#9b51e0", "#3498db", "#2ecc71", "#f39c12"],
      };
    }

    return null;
  }
}

// Simple AI fallback for when no external models are available
class SimpleAI {
  async generate(prompt: string): Promise<string> {
    // Extract the user question from the prompt
    const questionMatch = prompt.match(/USER QUESTION: (.+)/);
    const question = questionMatch ? questionMatch[1] : prompt;

    // Extract data context
    const dataMatch = prompt.match(/DATA CONTEXT:([\s\S]*?)SCHEMA:/);
    const dataContext = dataMatch ? dataMatch[1] : "";

    // Generate intelligent response based on the question and context
    return this.generateIntelligentResponse(question, dataContext);
  }

  private generateIntelligentResponse(
    question: string,
    dataContext: string
  ): string {
    const lowerQuestion = question.toLowerCase();

    // Parse the data context to get actual numbers
    const totalMatch = dataContext.match(/Total leads: (\d+)/);
    const salesMatch = dataContext.match(/Sales leads: (\d+)/);
    const rentalMatch = dataContext.match(/Rental leads: (\d+)/);
    const sourcesMatch = dataContext.match(/Sources: ([^\\n]+)/);
    const personnelMatch = dataContext.match(/Personnel: ([^\\n]+)/);

    const total = totalMatch ? parseInt(totalMatch[1]) : 0;
    const sales = salesMatch ? parseInt(salesMatch[1]) : 0;
    const rental = rentalMatch ? parseInt(rentalMatch[1]) : 0;
    const sources = sourcesMatch ? sourcesMatch[1].split(", ") : [];
    const personnel = personnelMatch ? personnelMatch[1].split(", ") : [];

    // Generate contextual response
    if (lowerQuestion.includes("uzay") || lowerQuestion.includes("space")) {
      return JSON.stringify({
        summary:
          "Uzay hakkƒ±nda bilgi veremem √ß√ºnk√º ben gayrimenkul lead y√∂netim sisteminizin AI asistanƒ±yƒ±m. Ancak lead verileriniz hakkƒ±nda her ≈üeyi sorabiliriniz: lead sayƒ±larƒ±, kaynak analizi, personel performansƒ±, trend analizi, m√º≈üteri bilgileri ve daha fazlasƒ±. Hangi konuda yardƒ±mcƒ± olabilirim?",
        needsChart: false,
      });
    }

    if (
      lowerQuestion.includes("neler") ||
      lowerQuestion.includes("ne yapabilir")
    ) {
      return JSON.stringify({
        summary: `Ben ${total} adet lead verinizin AI asistanƒ±yƒ±m. Size ≈üunlarda yardƒ±mcƒ± olabilirim:

üìä Veri Analizi:
‚Ä¢ Lead sayƒ±larƒ± ve daƒüƒ±lƒ±mlarƒ±
‚Ä¢ Kaynak analizi (${sources.join(", ")})
‚Ä¢ Personel performansƒ± (${personnel.join(", ")})
‚Ä¢ Trend analizi ve zaman serisi
‚Ä¢ Durum analizleri

üîç Sorgular:
‚Ä¢ "Instagram'dan ka√ß lead geldi?"
‚Ä¢ "En iyi performans g√∂steren personel kim?"
‚Ä¢ "Bu ay satƒ±lƒ±k lead trendi nasƒ±l?"
‚Ä¢ "Hangi kaynak en etkili?"

üí° ƒ∞ntelligent Cevaplar:
‚Ä¢ Ger√ßek verilerinize dayalƒ± yanƒ±tlar
‚Ä¢ Grafikler ve g√∂rseller
‚Ä¢ Detaylƒ± analizler
‚Ä¢ Trend tahminleri

Hangi konuda bilgi almak istiyorsunuz?`,
        needsChart: true,
        chartSpec: {
          type: "pie",
          title: "Lead Tipi Daƒüƒ±lƒ±mƒ±",
          labels: ["Satƒ±lƒ±k", "Kiralƒ±k"],
          data: [sales, rental],
          colors: ["#9b51e0", "#3498db"],
        },
      });
    }

    // Default intelligent response
    return JSON.stringify({
      summary: `"${question}" sorunuz i√ßin analiz yapƒ±yorum:

Bu ${total} leadlik veritabanƒ±nƒ±zdan size ≈üu bilgileri verebilirim:
‚Ä¢ ${sales} satƒ±lƒ±k, ${rental} kiralƒ±k lead
‚Ä¢ ${sources.length} farklƒ± kaynak: ${sources.join(", ")}
‚Ä¢ ${personnel.length} personel: ${personnel.join(", ")}

Daha spesifik sorular sorabilirsiniz, ben ger√ßek verilerinizi analiz ederek yanƒ±tlayabilirim!`,
      needsChart: true,
      chartSpec: {
        type: "pie",
        title: "Lead Daƒüƒ±lƒ±mƒ±",
        labels: ["Satƒ±lƒ±k", "Kiralƒ±k"],
        data: [sales, rental],
        colors: ["#9b51e0", "#3498db"],
      },
    });
  }
}

const realAI = new RealAIAssistant();

export async function handleAIQuery(req: Request, res: Response) {
  try {
    const { query }: AIQueryRequest = req.body;

    if (!query?.trim()) {
      return res.status(400).json({ error: "Query is required" });
    }

    // Set up Server-Sent Events
    res.writeHead(200, {
      "Content-Type": "text/event-stream",
      "Cache-Control": "no-cache",
      Connection: "keep-alive",
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Headers": "Cache-Control",
    });

    const sendEvent = (event: StreamEvent) => {
      res.write(`data: ${JSON.stringify(event)}\n\n`);
    };

    try {
      sendEvent({
        type: "text",
        chunk: "ü§ñ AI ger√ßek verileri analiz ediyor...\n",
      });

      // Get all leads data
      const leads = await storage.getLeads();

      sendEvent({
        type: "text",
        chunk: `üìä ${leads.length} lead verisi √ºzerinde AI analizi yapƒ±lƒ±yor...\n`,
      });

      // Process query with real AI
      const result = await realAI.processQuery(query, leads);

      sendEvent({ type: "text", chunk: "‚úÖ AI analizi tamamlandƒ±!\n\n" });
      sendEvent({ type: "text", chunk: result.summary });

      if (result.chartSpec) {
        sendEvent({
          type: "chart",
          chartSpec: result.chartSpec,
        });
      }

      sendEvent({ type: "complete" });
    } catch (error) {
      console.error("AI query error:", error);
      sendEvent({
        type: "error",
        error: `‚ùå AI analizi sƒ±rasƒ±nda hata: ${
          error instanceof Error ? error.message : "Bilinmeyen hata"
        }`,
      });
    }

    res.end();
  } catch (error) {
    console.error("AI endpoint error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
}

export { RealAIAssistant };
